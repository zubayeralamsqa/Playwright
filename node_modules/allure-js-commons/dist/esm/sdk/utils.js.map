{"version":3,"file":"utils.js","names":["LabelName","Status","getStatusFromError","error","test","constructor","name","message","stack","FAILED","BROKEN","ansiRegex","onlyFirst","arguments","length","undefined","pattern","join","RegExp","stripAnsi","str","regex","replace","getMessageAndTraceFromError","trace","allureIdRegexp","_wrapRegExp","id","allureIdRegexpGlobal","allureLabelRegexp","value","allureLabelRegexpGlobal","isMetadataTag","tag","extractMetadataFromString","title","labels","split","forEach","val","_val$match","idValue","match","groups","push","ALLURE_ID","labelMatch","cleanTitle","trim","isAnyStepFailed","item","isFailed","status","steps","find","step","isAllStepsEnded","every","stop","hasLabel","testResult","labelName","l","hasStepMessage","messages","some","type","getStepsMessagesPair","reduce","acc","unfinishedStepIdx","findLastIndex","getUnfinishedStepsMessages","grouppedStepsMessage","filter","isPromise","obj","then","serialize","maxDepth","maxLength","replacer","limitString","JSON","stringify","createSerializeReplacer","String","userDefinedReplacer","parents","limitingReplacer","_","Object","is","at","pop","includes","Map","excludeCircularRefsFromMap","Set","excludeCircularRefsFromSet","composeReplacers","first","second","k","v","call","map","Array","from","_ref","_ref2","set","concat","substring"],"sources":["../../../src/sdk/utils.ts"],"sourcesContent":["import type { FixtureResult, Label, StatusDetails, StepResult, TestResult } from \"../model.js\";\nimport { LabelName, Status } from \"../model.js\";\nimport type { RuntimeMessage, SerializeOptions, SerializerReplacerFunc } from \"./types.js\";\n\nexport const getStatusFromError = (error: Partial<Error>): Status => {\n  switch (true) {\n    /**\n     * Native `node:assert` and `chai` (`vitest` uses it under the hood) throw `AssertionError`\n     * `jest` throws `JestAssertionError` instance\n     * `jasmine` throws `ExpectationFailed` instance\n     * `vitest` throws `Error` for extended assertions, so we look into stack\n     */\n    case /assert/gi.test(error.constructor.name):\n    case /expectation/gi.test(error.constructor.name):\n    case error.name && /assert/gi.test(error.name):\n    case error.message && /assert/gi.test(error.message):\n    case error.stack && /@vitest\\/expect/gi.test(error.stack):\n    case error.stack && /playwright\\/lib\\/matchers\\/expect\\.js/gi.test(error.stack):\n    case \"matcherResult\" in error:\n      return Status.FAILED;\n    default:\n      return Status.BROKEN;\n  }\n};\n\n/**\n * Source: https://github.com/chalk/ansi-regex\n */\nconst ansiRegex = ({ onlyFirst = false } = {}) => {\n  const pattern = [\n    \"[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)\",\n    \"(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-nq-uy=><~]))\",\n  ].join(\"|\");\n\n  return new RegExp(pattern, onlyFirst ? undefined : \"g\");\n};\n\n/**\n * https://github.com/chalk/strip-ansi\n */\nexport const stripAnsi = (str: string): string => {\n  const regex = ansiRegex();\n  return str.replace(regex, \"\");\n};\n\nexport const getMessageAndTraceFromError = (\n  error: Error | { message?: string; stack?: string },\n): Pick<StatusDetails, \"message\" | \"trace\"> => {\n  const { message, stack } = error;\n  return {\n    message: message ? stripAnsi(message) : undefined,\n    trace: stack ? stripAnsi(stack) : undefined,\n  };\n};\n\nexport const allureIdRegexp = /(?:^|\\s)@?allure\\.id[:=](?<id>[^\\s]+)/;\nexport const allureIdRegexpGlobal = new RegExp(allureIdRegexp, \"g\");\nexport const allureLabelRegexp = /(?:^|\\s)@?allure\\.label\\.(?<name>[^:=\\s]+)[:=](?<value>[^\\s]+)/;\nexport const allureLabelRegexpGlobal = new RegExp(allureLabelRegexp, \"g\");\n\nexport const isMetadataTag = (tag: string) => {\n  return allureIdRegexp.test(tag) || allureLabelRegexp.test(tag);\n};\n\nexport const extractMetadataFromString = (\n  title: string,\n): {\n  labels: Label[];\n  cleanTitle: string;\n} => {\n  const labels = [] as Label[];\n\n  title.split(\" \").forEach((val) => {\n    const idValue = val.match(allureIdRegexp)?.groups?.id;\n\n    if (idValue) {\n      labels.push({ name: LabelName.ALLURE_ID, value: idValue });\n    }\n\n    const labelMatch = val.match(allureLabelRegexp);\n    const { name, value } = labelMatch?.groups || {};\n\n    if (name && value) {\n      labels?.push({ name, value });\n    }\n  });\n\n  const cleanTitle = title.replace(allureLabelRegexpGlobal, \"\").replace(allureIdRegexpGlobal, \"\").trim();\n\n  return { labels, cleanTitle };\n};\n\nexport const isAnyStepFailed = (item: StepResult | TestResult | FixtureResult): boolean => {\n  const isFailed = item.status === Status.FAILED;\n\n  if (isFailed || item.steps.length === 0) {\n    return isFailed;\n  }\n\n  return !!item.steps.find((step) => isAnyStepFailed(step));\n};\n\nexport const isAllStepsEnded = (item: StepResult | TestResult | FixtureResult): boolean => {\n  return item.steps.every((val) => val.stop && isAllStepsEnded(val));\n};\n\nexport const hasLabel = (testResult: TestResult, labelName: LabelName | string): boolean => {\n  return !!testResult.labels.find((l) => l.name === labelName);\n};\n\nexport const hasStepMessage = (messages: RuntimeMessage[]) => {\n  return messages.some((message) => message.type === \"step_start\" || message.type === \"step_stop\");\n};\n\nexport const getStepsMessagesPair = (messages: RuntimeMessage[]) =>\n  messages.reduce((acc, message) => {\n    if (message.type !== \"step_start\" && message.type !== \"step_stop\") {\n      return acc;\n    }\n\n    if (message.type === \"step_start\") {\n      acc.push([message]);\n\n      return acc;\n    }\n\n    const unfinishedStepIdx = acc.findLastIndex((step) => step.length === 1);\n\n    if (unfinishedStepIdx === -1) {\n      return acc;\n    }\n\n    acc[unfinishedStepIdx].push(message);\n\n    return acc;\n  }, [] as RuntimeMessage[][]);\n\nexport const getUnfinishedStepsMessages = (messages: RuntimeMessage[]) => {\n  const grouppedStepsMessage = getStepsMessagesPair(messages);\n\n  return grouppedStepsMessage.filter((step) => step.length === 1);\n};\n\nexport const isPromise = <T = any>(obj: any): obj is PromiseLike<T> =>\n  !!obj && (typeof obj === \"object\" || typeof obj === \"function\") && typeof obj.then === \"function\";\n\nexport const serialize = (value: any, { maxDepth = 0, maxLength = 0, replacer }: SerializeOptions = {}): string =>\n  limitString(\n    typeof value === \"object\" ? JSON.stringify(value, createSerializeReplacer(maxDepth, replacer)) : String(value),\n    maxLength,\n  );\n\nconst createSerializeReplacer = (maxDepth: number, userDefinedReplacer: SerializeOptions[\"replacer\"]) => {\n  const parents: unknown[] = [];\n  const limitingReplacer = function (this: unknown, _: string, value: unknown) {\n    if (typeof value !== \"object\" || value === null) {\n      return value;\n    }\n\n    while (parents.length > 0 && !Object.is(parents.at(-1), this)) {\n      parents.pop();\n    }\n\n    if ((maxDepth && parents.length >= maxDepth) || parents.includes(value)) {\n      return undefined;\n    }\n\n    parents.push(value);\n\n    return value instanceof Map\n      ? excludeCircularRefsFromMap(parents, value)\n      : value instanceof Set\n        ? excludeCircularRefsFromSet(parents, value)\n        : value;\n  };\n  return userDefinedReplacer ? composeReplacers(userDefinedReplacer, limitingReplacer) : limitingReplacer;\n};\n\nconst composeReplacers = (first: SerializerReplacerFunc, second: SerializerReplacerFunc): SerializerReplacerFunc =>\n  function (k, v) {\n    return second.call(this, k, first.call(this, k, v));\n  };\n\nconst excludeCircularRefsFromMap = (parents: any[], map: Map<any, any>) => {\n  return Array.from(map)\n    .filter(([k]) => !parents.includes(k))\n    .map(([k, v]) => [k, parents.includes(v) ? undefined : v]);\n};\n\nconst excludeCircularRefsFromSet = (parents: any[], set: Set<any>) => {\n  return Array.from(set).map((v) => (parents.includes(v) ? undefined : v));\n};\n\nconst limitString = (value: string, maxLength: number) =>\n  maxLength && value.length > maxLength ? `${value.substring(0, maxLength)}...` : value;\n"],"mappings":"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","ignoreList":[]}